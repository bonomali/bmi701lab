full.model.glm <- glm(day_28_flg ~ aline_flg + age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,data=dat,family="binomial")  #Note: used service_unit instead of service_unit2
summary(full.model.glm)
new.pt <- subset(dat,hadm_id==137140)
new.pt
predict(full.model.glm,newdata=new.pt,type="response")
dat$logRegPred <- predict(full.model.glm,newdata=dat,type="response")
hist(dat$logRegPred,breaks=11)
dat$logRegPred0.5 <- dat$logRegPred>0.5
predTab1 <- table(dat$logRegPred0.5,dat$day_28_flg==1,dnn=c("Prediction","Death by 28 Days"))
predTab1
set.seed(4441)  # We do this so it's reproducible!
library(caret)
trainIdx <- createDataPartition(dat$day_28_flg,p=0.5)$Resample1
datTrain <- dat[trainIdx,]
datTest <- dat[-trainIdx,]
train.glm <- glm(day_28_flg ~ aline_flg + age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,data=datTrain,family="binomial")
summary(train.glm)
datTrain$logRegPred <- predict(train.glm,newdata=datTrain,type="response")
datTrain$logRegPred0.5 <- datTrain$logRegPred>0.5
predTabTr <- table(datTrain$logRegPred0.5,datTrain$day_28_flg==1,dnn=c("Prediction","Death by 28 Days"))
predTabTr
datTest$logRegPred <- predict(train.glm,newdata=datTest,type="response")
datTest$logRegPred0.5 <- datTest$logRegPred>0.5
predTabTe <- table(datTest$logRegPred0.5,datTest$day_28_flg==1,dnn=c("Prediction","Death by 28 Days"))
predTabTe
library(ROCR)
predTr <- prediction(datTrain$logRegPred,datTrain$day_28_flg)
perfTr <- performance(predTr,"tpr","fpr")
plot(perfTr)
text(0.6,0.2,paste0("AUC: ", round(performance(predTr,"auc")@y.values[[1]],3)))
predTe <- prediction(datTest$logRegPred,datTest$day_28_flg)
predTe
perfTe <- performance(predTe,"tpr","fpr")
lines(perfTe@x.values[[1]],perfTe@y.values[[1]],col='red')
text(0.6,0.1,paste0("AUC: ", round(performance(predTe,"auc")@y.values[[1]],3)),col='red')
prop.table(table(datTrain$day_28_flg,cut2(datTrain$logRegPred,seq(0,1,0.1))),2)
gbm::calibrate.plot(datTrain$day_28_flg,datTrain$logRegPred)
prop.table(table(datTest$day_28_flg,cut2(datTest$logRegPred,seq(0,1,0.1))),2)
gbm::calibrate.plot(datTest$day_28_flg,datTest$logRegPred)
set.seed(777)
trainIdx <- createDataPartition(dat$aline_flg, p=0.5)$Resample1
datTrain <- dat[trainIdx,]
datTest <- dat[-trainIdx,]
full.glm <- glm(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg, data=datTrain, family="binomial")
summary(train.glm)
dat$logRegPred <- predict(full.glm, newdata=dat, type="response")
dat$logRegPred0.5 <- dat$logRegPred>0.5
predTab <- table(dat$logRegPred0.5, dat$aline_flg==1,
dnn=c("Prediction","Aline"))
(predTab <- table(dat$logRegPred0.5, dat$aline_flg==1,
dnn=c("Prediction","Aline")))
full.glm <- glm(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg, data=dat, family="binomial")
dat$logRegPred <- predict(full.glm, newdata=dat, type="response")
dat$logRegPred0.5 <- dat$logRegPred>0.5
(predTab <- table(dat$logRegPred0.5, dat$aline_flg==1,
dnn=c("Prediction","Aline")))
set.seed(777)
full.glm <- glm(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg, data=dat, family="binomial")
dat$logRegPred <- predict(full.glm, newdata=dat, type="response")
dat$logRegPred0.5 <- dat$logRegPred>0.5
(predTab <- table(dat$logRegPred0.5, dat$aline_flg==1,
dnn=c("Prediction","Aline")))
set.seed(777)
trainIdx <- createDataPartition(dat$aline_flg, p=0.5)$Resample1
datTrain <- dat[trainIdx,]
datTest <- dat[-trainIdx,]
train.glm <- glm(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg, data=datTrain, family="binomial")
datTrain$logRegPred <- predict(full.glm, newdata=datTrain, type="response")
datTrain$logRegPred0.5 <- datTrain$logRegPred>0.5
(predTab <- table(datTrain$logRegPred0.5, datTrain$aline_flg==1,
dnn=c("Prediction","Aline")))
datTest$logRegPred <- predict(full.glm, newdata=datTest, type="response")
datTest$logRegPred0.5 <- datTest$logRegPred>0.5
(predTab <- table(datTest$logRegPred0.5, datTest$aline_flg==1,
dnn=c("Prediction","Aline")))
predTr <- prediction(datTrain$logRegPred, datTrain$aline_flg)
perfTr <- performance(predTr,"tpr","fpr")
plot(perfTr)
text(0.6,0.2,paste0("AUC: ", round(performance(predTr,"auc")@y.values[[1]],3)))
predTe <- prediction(datTest$logRegPred, datTest$aline_flg)
perfTe <- performance(predTe,"tpr","fpr")
lines(perfTe@x.values[[1]],perfTe@y.values[[1]],col='red')
text(0.6,0.1,paste0("AUC: ", round(performance(predTe,"auc")@y.values[[1]],3)),col='red')
prop.table(table(datTrain$aline_flg, cut2(datTrain$logRegPred,seq(0,1,0.1))),2)
gbm::calibrate.plot(datTrain$aline_flg, datTrain$logRegPred)
prop.table(table(datTest$aline_flg, cut2(datTest$logRegPred,seq(0,1,0.1))),2)
gbm::calibrate.plot(datTest$aline_flg, datTest$logRegPred)
library(caret);
cvTr <- trainControl(method="cv",number=5,classProbs = TRUE,summaryFunction=twoClassSummary)
dat$day_28_flg <- as.factor(ifelse(dat$day_28_flg==1,"Died","Survived"))
mort.tr.logit <- train(day_28_flg ~ aline_flg + age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,data=dat,family="binomial",method="glm",trControl=cvTr,metric="ROC")
print(mort.tr.logit)
summary(mort.tr.logit)
dat$mort.tr.logit.pred <- predict(mort.tr.logit,newdata=dat,type="prob")
mort.tr.logitaic <- train(as.factor(day_28_flg) ~ aline_flg  + age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,data=dat,family="binomial",method="glmStepAIC",trControl=cvTr,metric="ROC",trace=0)
print(mort.tr.logitaic)
summary(mort.tr.logitaic)
mort.tr.logitglmnet <- train(as.factor(day_28_flg) ~ aline_flg + age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,data=dat,family="binomial",method="glmnet",trControl=cvTr,metric="ROC")
print(mort.tr.logitglmnet )
plot(mort.tr.logitglmnet)
plot(varImp(mort.tr.logitglmnet))
mort.tr.logitrf<- train(as.factor(day_28_flg) ~ aline_flg + age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,data=dat,method="rf",trControl=cvTr,importance=TRUE,metric="ROC")
print(mort.tr.logitrf )
plot(mort.tr.logitrf)
plot(varImp(mort.tr.logitrf))
mort.tr.logitgbm<- train(as.factor(day_28_flg) ~ aline_flg + age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,data=dat,method="gbm",trControl=cvTr,verbose=FALSE,metric="ROC")
print(mort.tr.logitgbm )
plot(mort.tr.logitgbm)
plot(varImp(mort.tr.logitgbm))
dat$predMort1 <- predict(mort.tr.logit,type="prob")[,2]
dat$predMort2 <- predict(mort.tr.logitglmnet,type="prob")[,2]
dat$predMort3 <- predict(mort.tr.logitrf,type="prob")[,2]
dat$aline_flg <- as.factor(ifelse(dat$aline_flg==1, "Aline", "No_Aline"))
cvTr <- trainControl(method="cv", number=5, classProbs=TRUE,
summaryFunction=twoClassSummary)
dat$aline_flg <- as.factor(ifelse(dat$aline_flg==1, "Aline", "No_Aline"))
aline.tr.logit <- train(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,
data=dat, family="binomial", method="glm",
trControl=cvTr, metric="ROC")
print(aline.tr.logit)
dat
View(dat)
dat <- read.csv("aline-dataset.csv")
dat$sofa_cat <- cut2(dat$sofa_first,c(0,4,7))
dat$age.cat <- cut2(dat$age,c(50,60,70,80))
dat$service_unit2 <- as.character(dat$service_unit)
dat$service_unit2[dat$service_unit2 %in% names(which(table(dat$service_unit)<200))] <- "Other"
cvTr <- trainControl(method="cv", number=5, classProbs=TRUE,
summaryFunction=twoClassSummary)
dat$aline_flg <- as.factor(ifelse(dat$aline_flg==1, "Aline", "No_Aline"))
aline.tr.logit <- train(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,
data=dat, family="binomial", method="glm",
trControl=cvTr, metric="ROC")
print(aline.tr.logit)
aline.tr.rf <- train(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,
data=dat, method="rf", tuneLength=5,
trControl=cvTr, metric="ROC")
print(aline.tr.rf)
plot(aline.tr.rf)
plot(varImp(aline.tr.rf))
aline.tr.dnn <- train(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,
data=dat, method="dnn",
trControl=cvTr, metric="ROC")
n
print(aline.tr.dnn)
plot(aline.tr.dnn)
plot(varImp(aline.tr.dnn))
varImp(aline.tr.dnn)
print(aline.tr.dnn)
aline.tr.nnet <- train(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,
data=dat, method="nnet",
trControl=cvTr, metric="ROC")
print(aline.tr.nnet)
plot(aline.tr.nnet)
plot(varImp(aline.tr.nnet))
dat$predLogit <- predict(aline.tr.logit, type="prob")[,2]
dat$predRf <- predict(aline.tr.rf, type="prob")[,2]
dat$predNNet <- predict(aline.tr.nnet, type="prob")[,2]
View(dat)
pred <- prediction(dat$predLogit, dat$aline_flg)
pred <- performance(pred, "tpr", "fpr")
pred
pred <- performance(dat$predLogit, "tpr", "fpr")
dat$predLogit
pred <- prediction(dat$predLogit, dat$aline_flg)
pred
pred <- performance(dat$predLogit, "tpr", "fpr")
pred <- performance(pred, "tpr", "fpr")
View(datTrain)
pred
plot(pred)
text(0.6,0.2, paste0("AUC: ", round(performance(pred, "auc")@y.values[[1]],3)))
pred <- prediction(dat$predLogit, dat$aline_flg)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
text(0.6, 0.2, paste0("AUC: ", round(performance(pred, "auc")@y.values[[1]],3)))
pred <- prediction(dat$predRf, dat$aline_flg)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
text(0.6, 0.2, paste0("AUC: ", round(performance(pred, "auc")@y.values[[1]],3)), col="red")
pred <- prediction(dat$predLogit, dat$aline_flg)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
text(0.6, 0.2, paste0("AUC: ", round(performance(pred, "auc")@y.values[[1]],3)))
lines(perf@x.values[[1]], perf@y.values[[1]], col='red')
pred <- prediction(dat$predLogit, dat$aline_flg)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
text(0.6, 0.2, paste0("AUC: ", round(performance(pred, "auc")@y.values[[1]],3)))
predL <- prediction(dat$predLogit, dat$aline_flg)
perfL <- performance(predL, "tpr", "fpr")
plot(perfL)
text(0.6, 0.2, paste0("AUC: ", round(performance(predL, "auc")@y.values[[1]],3)))
predR <- prediction(dat$predRf, dat$aline_flg)
perfR <- performance(predR, "tpr", "fpr")
lines(perfR@x.values[[1]], perfR@y.values[[1]], col='red')
text(0.6, 0.2, paste0("AUC: ", round(performance(predR, "auc")@y.values[[1]],3)), col="red")
text(0.6, 0.1, paste0("AUC: ", round(performance(predR, "auc")@y.values[[1]],3)), col="red")
predL <- prediction(dat$predLogit, dat$aline_flg)
perfL <- performance(predL, "tpr", "fpr")
plot(perfL)
text(0.6, 0.2, paste0("AUC: ", round(performance(predL, "auc")@y.values[[1]],3)))
predR <- prediction(dat$predRf, dat$aline_flg)
perfR <- performance(predR, "tpr", "fpr")
lines(perfR@x.values[[1]], perfR@y.values[[1]], col='red')
text(0.6, 0.1, paste0("AUC: ", round(performance(predR, "auc")@y.values[[1]],3)), col="red")
predN <- prediction(dat$predNNet, dat$aline_flg)
perfN <- performance(predN, "tpr", "fpr")
predL <- prediction(dat$predLogit, dat$aline_flg)
perfL <- performance(predL, "tpr", "fpr")
plot(perfL)
text(0.6, 0.3, paste0("AUC: ", round(performance(predL, "auc")@y.values[[1]],3)))
predR <- prediction(dat$predRf, dat$aline_flg)
perfR <- performance(predR, "tpr", "fpr")
lines(perfR@x.values[[1]], perfR@y.values[[1]], col='red')
text(0.6, 0.2, paste0("AUC: ", round(performance(predR, "auc")@y.values[[1]],3)), col="red")
predN <- prediction(dat$predNNet, dat$aline_flg)
perfN <- performance(predN, "tpr", "fpr")
lines(perfN@x.values[[1]], perfN@y.values[[1]], col='blue')
text(0.6, 0.1, paste0("AUC: ", round(performance(predN, "auc")@y.values[[1]],3)), col="blue")
prop.table(table(dat$aline_flg, cut2(dat$predLogit, seq(0,1,0.1))), 2)
gbm::calibrate.plot(dat$aline_flg, dat$predLogit)
prop.table(table(dat$aline_flg, cut2(dat$predRf, seq(0,1,0.1))), 2)
gbm::calibrate.plot(dat$aline_flg, dat$predRf)
prop.table(table(dat$aline_flg, cut2(dat$predNNet, seq(0,1,0.1))), 2)
gbm::calibrate.plot(dat$aline_flg, dat$predNNet)
predL <- prediction(dat$predLogit, dat$aline_flg)
perfL <- performance(predL, "tpr", "fpr")
plot(perfL)
text(0.6, 0.3, paste0("AUC: ", round(performance(predL, "auc")@y.values[[1]],3)))
predR <- prediction(dat$predRf, dat$aline_flg)
perfR <- performance(predR, "tpr", "fpr")
lines(perfR@x.values[[1]], perfR@y.values[[1]], col='red')
text(0.6, 0.2, paste0("AUC: ", round(performance(predR, "auc")@y.values[[1]],3)), col="red")
predN <- prediction(dat$predNNet, dat$aline_flg)
perfN <- performance(predN, "tpr", "fpr")
lines(perfN@x.values[[1]], perfN@y.values[[1]], col='blue')
text(0.6, 0.1, paste0("AUC: ", round(performance(predN, "auc")@y.values[[1]],3)), col="blue")
# e
dat <- read.csv("aline-dataset.csv")
dat$sofa_cat <- cut2(dat$sofa_first,c(0,4,7))
dat$age.cat <- cut2(dat$age,c(50,60,70,80))
dat$service_unit2 <- as.character(dat$service_unit)
dat$service_unit2[dat$service_unit2 %in% names(which(table(dat$service_unit)<200))] <- "Other"
cvTr <- trainControl(method="cv", number=5, classProbs=TRUE,
summaryFunction=twoClassSummary)
dat$aline_flg <- as.factor(ifelse(dat$aline_flg==1, "Aline", "No_Aline"))
aline.tr.logit <- train(aline_flg ~ age.cat + sofa_cat + service_unit2 + renal_flg + chf_flg + cad_flg + stroke_flg + mal_flg + resp_flg,
data=dat, family="binomial", method="glm",
trControl=cvTr, metric="ROC")
print(aline.tr.logit)
plot(aline.tr.logit)
plot(varImp(aline.tr.logit))
library(ggplot2)
qplot(price, carat, data=diamonds)
qplot(price, carat, data=diamonds[1:1000, ])
qplot(price, carat, data=diamonds)
str(diamonds)
qplot(price, carat, data=diamonds, color=cut)
qplot(price, clarity, data=diamonds)
qplot(price, carat, data=diamonds)
qplot(price, carat, data=diamonds, color=clarity)
qplot(price, carat, data=diamonds, geom = c("point", "smooth"))
qplot(price, carat, data=diamonds, fill=clarity)
qplot(price, carat, data=diamonds, fill=cut)
qplot(price, data=diamonds, fill=cut)
qplot(price, carat, data=diamonds, geom=c("point", "smooth"))
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, color=clarity)
qplot(carat, price, data=diamonds, geom=c("point", "smooth"))
qplot(price, data=diamonds, fill=cut)
qplot(carat, price, data=diamonds,
facet=.~cut)
qplot(carat, price, data=diamonds,
facet=.~cut)
qplot(carat, price, data=diamonds,
facets=.~cut)
qplot(carat, price, data=diamonds,
facets=cut~.)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(carat, price, data=diamonds,
facets=cut~., binwidth = 100)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_boxplot()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_grid(cut~.)
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
facet_grid(cut~.) +
geom_smooth(method='lm')
ggplot(diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
geom_smooth(method='lm')
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat[50,2] <- 100  ## Outlier!
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
if (!require('choroplethr')){
install.packages("choroplethr")
library(choroplethr) ## for state_choropleth()
}
if (!require('choroplethrMaps')){
install.packages("choroplethrMaps") ##上次沒有安裝到這個package
library(choroplethrMaps) ## for state_choropleth()
}
data(df_pop_state) #記載各州人口數的資料
state_choropleth(df_pop_state) #把各州人口畫在地圖上
if (!require('rgdal')){ #for fortify()
install.packages("rgdal"); library(rgdal)
}
if (!require('rgeos')){ #for fortify()
install.packages("rgeos"); library(rgeos)
}
if (!require('maptools')){ #for readShapeSpatial()
install.packages("maptools"); library(maptools)
}
tw_new <- readShapeSpatial("twnshp")
tw_new <- readShapeSpatial("twn.shp")
setwd("~/")
setwd("~/git/bmi701lab")
tw_new <- readShapeSpatial("twn.shp")
tw_new <- readShapeSpatial("Town_MOI_1041215.shp")
tw_new <- readShapeSpatial("Taiwan/Town_MOI_1041215.shp")
library(ggplot2) # for fortify(), ggplot(), ggmap()
tw_new.df <- fortify(tw_new, region = "T_UID") # from ggplot2 package
tw_new.df <- fortify(tw_new, region = "T_UID") # from ggplot2 package
mydata<-data.frame(NAME_2=tw_new$T_Name, id=tw_new$T_UID,
prevalence=rnorm(length(tw_new$T_UID)))
final.plot<-merge(tw_new.df,mydata,by="id",all.x=T)
tw_new.df <- fortify(tw_new, region = "T_UID") # from ggplot2 package
mydata<-data.frame(NAME_2=tw_new$T_Name, id=tw_new$T_UID,
if (!require('rgdal')){#for fortify()
install.packages("rgdal");library(rgdal)
}
if (!require('rgeos')){#for fortify()
install.packages("rgeos");library(rgeos)
}
if (!require('maptools')){#for readShapeSpatial()
install.packages("maptools");library(maptools)
}
tw_new <- readShapeSpatial("Taiwan/Town_MOI_1041215.shp") #檔名
names(tw_new)
library(ggplot2) #for fortify(), ggplot(), ggmap()
head(tw_new$Town_ID)
tw_new.df <- fortify(tw_new, region = "T_UID") #from ggplot2 package
if (!require('ggmap')){
install.packages("ggmap")
library(ggmap)#for get_map()
}
twmap <- get_map(location = 'Taiwan', zoom = 7,language = "zh-TW")
ggmap(twmap)
if (!require('ggmap')){
install.packages("ggmap")
library(ggmap)#for get_map()
}
twmap <- get_map(location = 'Taiwan', zoom = 7,language = "zh-TW")
ggmap(twmap) #基於ggplot2物件，可用相同方式處理
if (!require('ggmap')){
install.packages("ggmap")
library(ggmap)#for get_map()
}
twmap <- get_map(location = 'Taiwan', zoom = 7,language = "zh-TW")
ggmap(twmap)
twmap <- get_map(location = 'Boston', zoom = 15, language = "en-US")
ggmap(bos) #基於ggplot2物件，可用相同方式處理
bos <- get_map(location = 'Boston', zoom = 15, language = "en-US")
ggmap(bos) #基於ggplot2物件，可用相同方式處理
cam <- get_map(location = 'Cambridge', zoom = 15, language = "en-US")
ggmap(cam) #基於ggplot2物件，可用相同方式處理
TaipeiMap = get_map(location = c(121.43,24.93,121.62,25.19),
zoom = 14, maptype = 'roadmap')
ggmap(TaipeiMap,extent = 'device') #extent = 'device' 滿版
twmap <- get_map(location='Taiwan', zoom=9, language="en-US")
twmap <- get_map(location='Taiwan', zoom=9, language="en-US")
ggmap(twmap)
twmap <- get_map(location='Taiwan', zoom=7, language="en-US")
ggmap(twmap)
TaipeiMap <- get_map(location = c(121.43,24.93,121.62,25.19),
zoom = 14, maptype = 'roadmap')
tpmap <- get_map(location = c(121.43,24.93,121.62,25.19),
zoom = 14, maptype = 'roadmap')
ggmap(tpmap, extent = 'device') # extent='device': full screen
ggmap(twmap) + #ggmap
geom_polygon(data = final.plot,  #面量圖
aes(x = long, y = lat, group = group, fill = prevalence),
color = "grey80", size = 0.1,alpha = 0.5) +
scale_fill_gradientn(colours = brewer.pal(9,"Reds"))
StateCenter<-data.frame( #取得美國各州中心座標資料
region=tolower(state.name),lon=state.center$x,lat=state.center$y)
StatePop<-merge(df_pop_state,StateCenter,by="region") #美國各州人口資料
PopPoint<-NULL #將人口數值，轉為點！重要！
for(i in 1:nrow(StatePop)){
for(j in 1:(StatePop[i,"value"]/1000000)){
PopPoint<-rbind(PopPoint,StatePop[i,])
}
}
USMap <- get_map(location = "United States", zoom = 4)
densityMap<-ggmap(USMap, extent = "device") +
geom_density2d(data = PopPoint, aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = PopPoint,
aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 16, geom = "polygon") +
scale_fill_gradient(low = "green", high = "red", guide = FALSE) +
scale_alpha(range = c(0, 0.3), guide = FALSE)
densityMap
ggmap(twmap) + # ggmap
geom_polygon(data = df_pop_state,  #面量圖
aes(x = long, y = lat, group = group, fill = prevalence),
color = "grey80", size = 0.1,alpha = 0.5) +
scale_fill_gradientn(colours = brewer.pal(9,"Reds"))
library(RColorBrewer) #配色用brewer.pal( 9 , "Reds" )
ggmap(twmap) + # ggmap
geom_polygon(data = df_pop_state,  #面量圖
aes(x = long, y = lat, group = group, fill = prevalence),
color = "grey80", size = 0.1,alpha = 0.5) +
scale_fill_gradientn(colours = brewer.pal(9,"Reds"))
df_pop_state
StateCenter <- data.frame(
region=tolower(state.name),
lon=state.center$x,
lat=state.center$y)
head(StateCenter,1)
StatePop <- merge(df_pop_state, StateCenter, by="region")
head(StatePop,1)
PopPoint <- NULL
for(i in 1:nrow(StatePop)){
# 1M people -> one point
for(j in 1:(StatePop[i, "value"] / 1000000)){
PopPoint <- rbind(PopPoint, StatePop[i, ])
}
}
head(PopPoint, 3)
USMap <- get_map(location = "United States", zoom = 4)
USMap <- get_map(location = "United States", zoom = 4)
densityMap <- ggmap(USMap, extent = "device") +
geom_density2d(data = PopPoint, aes(x = lon, y = lat), size = 0.3) +
stat_density2d(data = PopPoint,
aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 16, geom = "polygon") +
scale_fill_gradient(low = "green", high = "red", guide = FALSE) +
scale_alpha(range = c(0, 0.3), guide = FALSE)
densityMap
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
head(nba)
library(reshape2) # for melt()
nba.m <- melt(nba,id.vars = "Name") #寬表轉長表,以名字作依據
head(nba.m,10)
library(ggplot2) # for ggplot()
ggplot(nba.m, aes(variable, Name)) + #aes(x,y)
geom_tile(aes(fill = value),colour = "white")+ #geom_tile: 區塊著色
scale_fill_gradient(low = "white",high = "steelblue") #數值低：白色
head(nba, 2)
nba[, 2:21] <- apply(nba[, 2:21], 2, scale) #scale處理，將數值轉為平均=0
head(nba,2)
apply(nba[, 2:21], 2, scale)
if (!require('rgdal')){ #for fortify()
install.packages("rgdal"); library(rgdal)
}
if (!require('rgeos')){ #for fortify()
install.packages("rgeos"); library(rgeos)
}
if (!require('maptools')){ #for readShapeSpatial()
install.packages("maptools"); library(maptools)
}
tw_new <- readShapeSpatial("Taiwan/Town_MOI_1041215.shp")
library(ggplot2) # for fortify(), ggplot(), ggmap()
tw_new.df <- fortify(tw_new, region = "T_UID") # from ggplot2 package
if (!require(gpclib)) install.packages("gpclib", type="source")
gpclibPermit()
tw_new.df <- fortify(tw_new, region = "T_UID") # from ggplot2 package
mydata<-data.frame(NAME_2=tw_new$T_Name, id=tw_new$T_UID,
prevalence=rnorm(length(tw_new$T_UID)))
final.plot<-merge(tw_new.df,mydata,by="id",all.x=T)
library(RColorBrewer) #配色用brewer.pal( 9 , "Reds" )
twcmap<-ggplot() +
geom_polygon(data = final.plot,
aes(x = long, y = lat, group = group,
fill = prevalence),
color = "black", size = 0.25) +
coord_map()+#維持地圖比例
scale_fill_gradientn(colours = brewer.pal(9,"Reds"))+
theme_void()+
labs(title="Prevalence of X in Taiwan")
twcmap
data(G20)
if (!require('treemapify')){
library(devtools)
install_github("wilkox/treemapify")
library(treemapify)
}
data(G20)
treeMapCoordinates <- treemapify(data=G20,
area = "Nom.GDP.mil.USD",fill = "HDI",
label = "Country",group = "Region")
ggplotify(treeMapCoordinates)+
scale_fill_gradient(low = "white",high = "steelblue")
if (!require('treemapify')){
library(devtools)
install_github("wilkox/treemapify")
library(treemapify)
}
library(reshape2)
