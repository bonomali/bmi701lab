library(gdata)
library(sqldf)
proc <- read.xls("~/Downloads/proc_tag_revised.xlsx")
mod  <- read.csv("~/Downloads/Proc_Modality.csv", stringsAsFactors = FALSE)
mod <- mod[!duplicated(mod), ]
colnames(mod) <- c("proc", "mod")
proc$twoMod <- sqldf("select * from proc left join mod on proc.X = mod.proc", drv = "SQLite")
proc <- proc[, c(1, 2, 5, 7, 8, 13)]
View(proc)
View(proc)
write.csv(proc, "~/Download/proc.csv", eol="\n", row.names = FALSE, col.names = TRUE)
write.csv(proc, "~/Download/proc.csv", eol="\n", row.names = FALSE)
write.table(proc, "~/Download/proc.csv", sep=",", eol="\n", row.names = FALSE)
write.table(proc, "~/Download/proc.csv", sep=",", eol="\n", row.names = FALSE, quote = FALSE)
write.table(proc, "~/Download/proc.csv", sep=",", eol="\n", row.names = FALSE, quote = FALSE, na = TRUE)
write.table(proc, "~/Download/proc.csv", sep=",", eol="\n", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(proc, "~/Download/proc.csv", sep=",", eol="\n", row.names = FALSE, col.names = TRUE, quote = FALSE)
setwd("~/Downloads/")
library(gdata)
library(sqldf)
library(ggplot2)
setwd("~/Downloads/")
proc <- read.xls("~/Downloads/proc_tag_revised.xlsx", sheet = 1, stringsAsFactors = FALSE)
mod  <- read.csv("~/Downloads/Proc_Modality.csv", stringsAsFactors = FALSE)
mod <- mod[!duplicated(mod), ]
colnames(mod) <- c("p", "m")
proc <- sqldf("select * from proc left join mod on proc.X = mod.p", drv = "SQLite")
proc <- proc[, c(1, 2, 5, 7, 8, 14)]
proc$PROCEDURE_SHORT[proc$PROCEDURE_SHORT == ""] <- "OTHER"
proc$SITE_SHORT[proc$SITE_SHORT == ""] <- "OTHER"
proc$FIRST[proc$FIRST == ""] <- "OTHER"
colnames(proc) <- c("procedure_name", "count", "procedure", "site", "mod", "modRef")
write.table(proc, "~/Downloads/proc.csv", sep=",", eol="\n", row.names = FALSE, col.names = TRUE, quote = FALSE)
png("site_procedure.png", width=800, height=600, units="px", res=75)
ggplot(proc, aes(x=factor(site), y=count, fill=factor(procedure)), color=factor(procedure)) +
stat_summary(fun.y=mean, position="stack", geom="bar")
dev.off()
png("mod_procedure.png", width=800, height=600, units="px", res=75)
ggplot(proc, aes(x=factor(mod), y=count, fill=factor(procedure)), color=factor(procedure)) +
stat_summary(fun.y=mean, position="stack", geom="bar")
dev.off()
png("procedure_mod.png", width=800, height=600, units="px", res=75)
ggplot(proc, aes(x=factor(procedure), y=count, fill=factor(mod)), color=factor(mod)) +
stat_summary(fun.y=mean, position="stack", geom="bar")
dev.off()
library(devtools)
install_github('chiragjp/xwas')
library(xwas)
data(nhanes)
data(nhanes)
nhanes
nrow(nhanes)
ncol(nhanes)
VarDescription[grep("telomere", VarDescription$var_desc, ignore.case=T), ]
data(nhanes)
nhanes$BMXBMI
MainTable
MainTable$female
MainTable$SEQN
nhanes$SEQN
nhanes$BMXBMIMainTable$female == 1, ]
nhanes$BMXBMI[MainTable$female == 1, ]
nhanes$BMXBMI[which(MainTable$female == 1), ]
MainTable$female == 1
MainTable$SEQN[MainTable$female == 1, ]
MainTable$female == 1
MainTable$SEQN
MainTable[MainTable$female == 1, ]
MainTable[MainTable$female == 1, "SEQN"]
nhanes$BMXBMI[nhanes$SEQN == MainTable[MainTable$female == 1, "SEQN"], ]
SEQNfemale <- MainTable[MainTable$female == 1, "SEQN"]
nhanes$BMXBMI[nhanes$SEQN == SEQNfemale]
nhanes$BMXBMI
nhanes$SEQN == SEQNfemale
SEQNfemale
nhanes$SEQN
VarDescription[grep("telomere", VarDescription$var_desc, ignore.case=T), ]
SEQNfemale <- MainTable[MainTable$female == 1, "SEQN"]
SEQNfemale
length(SEQNfemale)
length(nhanes$SEQN)
SEQNfemale
nhanes$SEQN %in% SEQNfemale
nhanes$BMXBMI[nhanes$SEQN %in% SEQNfemale]
mean(nhanes$BMXBMI[nhanes$SEQN %in% SEQNfemale])
mean(nhanes$BMXBMI[nhanes$SEQN %in% SEQNfemale], na.rm=TRUE)
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$male == 1, "SEQN"]], na.rm=TRUE)
MainTable$age_0_18
VarDescription
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$age == 1, "SEQN"]], na.rm=TRUE)
head(colnames(MainTable))
MainTable$RIDAGEYR
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$RIDAGEYR < 10, "SEQN"]], na.rm=TRUE)
MainTable$female == 1
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$RIDAGEYR >= 13 & MainTable$RIDAGEYR <= 18, "SEQN"]], na.rm=TRUE)
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$female == 1, "SEQN"]], na.rm=TRUE)
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$male == 1, "SEQN"]], na.rm=TRUE)
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$RIDAGEYR < 10, "SEQN"]], na.rm=TRUE)
mean(nhanes$BMXBMI[nhanes$SEQN %in% MainTable[MainTable$RIDAGEYR >= 13 & MainTable$RIDAGEYR <= 18, "SEQN"]], na.rm=TRUE)
VarDescription$female_N
VarDescription$binary_ref_grou
MainTable$BMXBMI
MainTable$VITAMIN_C_mg
MainTable[MainTable$female == 1, "SEQN"]]
MainTable[MainTable$female == 1, "SEQN"]
f <- MainTable[MainTable$female == 1, "SEQN"]
MainTable$VITAMIN_C_mg[f]
mean(MainTable$VITAMIN_C_mg[f], na.rm=TRUE)
mean(MainTable$VITAMIN_C_mg[MainTable[MainTable$female == 1, "SEQN"]], na.rm=TRUE)
mean(MainTable$VITAMIN_C_mg[MainTable[MainTable$male == 1, "SEQN"]], na.rm=TRUE)
mean(MainTable$VITAMIN_C_mg[MainTable[MainTable$RIDAGEYR < 10, "SEQN"]], na.rm=TRUE)
mean(MainTable$VITAMIN_C_mg[MainTable[MainTable$RIDAGEYR >= 13 & MainTable$RIDAGEYR <= 18, "SEQN"]], na.rm=TRUE)
packages <- c("data.table", "tm", "SnowballC", "wordcloud", "ggplot2",
"rpart", "caret", "fpc", "cluster")
# Install CRAN packages (if not already installed)
.packages <- c("data.table", "tm", "SnowballC", "wordcloud", "ggplot2",
"rpart", "caret", "fpc", "cluster")
.packages <- c("data.table", "tm", "SnowballC", "wordcloud", "ggplot2",
"rpart", "caret", "fpc", "cluster")
# Install CRAN packages (if not already installed)
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
# Load packages into session
lapply(.packages, library, character.only=TRUE)
setwd("~/git/bmi701lab/lab05_text/")
list.files(path=".")
list.files(path=".")
fname <- list.files(path=".")[grepl("lab05", list.files(path="."))]
data <- data.table()
fname <- list.files(path=".")[grepl("lab05_p", list.files(path="."))]
fname <- list.files(path=".")[grepl("lab05", list.files(path="."))]
for (i in 1:length(fname)) {
con <- file(fname[i], open='r')
tmp <- readLines(con)
tmp <- data.table(sentence=sapply(tmp, gsub, pattern=",", replacement=" "))
tmp$polarity <- i
tmp <- tmp[1:500, ]
data <- rbind(data, tmp)
rm(tmp)
}
View(data)
View(data)
View(data)
text <- data$sentence
text
text <- gsub("[[:punct:]]", "", text)
text <- iconv(text, "latin1", "ASCII", sub="")
text
corpus <- Corpus(VectorSource(text))
corpus
head(summary(corpus))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, c(stopwords("english")))
corpus
inspect(CORPUS[[1]])
inspect(corpus[[1]])
inspect(corpus[1])
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
dtm
dtm <- removeSparseTerms(dtm, 0.995)
dtm
findFreqTerms(dtm, lowfreq=100)
findAssocs(dtm, "like", corlimit=0.05)
df <- data.frame(as.matrix(dtm))
View(df)
wordcloud(colnames(df), colSums(df), scale=c(5, 1), max.words=250, min.freq=10,
color=brewer.pal(6, "Dark2"), vfont=c("sans serif", "plain"))
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf <- data.frame(word=names(freq), freq=freq)
p <- ggplot(subset(wf, freq > 30), aes(word, freq))
p <- p + geom_bar(stat="identity")
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
p <- ggplot(subset(wf, freq > 200), aes(word, freq))
p <- p + geom_bar(stat="identity")
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
p <- ggplot(subset(wf, freq > 50), aes(word, freq))
p <- p + geom_bar(stat="identity")
p <- p + theme(axis.text.x=element_text(angle=45, hjust=1))
p
d <- dist(t(dtm), method="euclidian")
km <- kmeans(d, 2)
clusplot(as.matrix(d), km$cluster, color=T, shade=T, labels=2, lines=0)
ata$polarity
data$polarity
df$polarity <- as.factor(data$polarity)
View(df)
set.seed(123)
inTraining <- createDataPartition(df$polarity, p=0.7, list=F)
training <- df[ inTraining, ]
testing <- df[-inTraining, ]
lm(y~x, training)
lm(polarity~., training)
model = rpart(polarity~., data=training)
summary(model)
plot(model, uniform=TRUE)
text(model, use.n=TRUE)
tst <- testing
tst$polarity = NULL
pred <- predict(model, tst, type="class")
pred
confusionMatrix(testing$polarity, pred)
control <- trainControl(method="cv", number=5)
model <- train(polarity~., data=training, method='svmLinear', trControl=control, verbose=F)
pred <- predict(model, tst, type="raw")
confusionMatrix(testing$polarity, pred)
